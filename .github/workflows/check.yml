permissions:
  contents: read
on:
  # Run on push to main branch, on pull requests and on manual workflow dispatch
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
concurrency:
  # Only run the latest workflow
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: check
jobs:
  build_docker:
    runs-on: ubuntu-latest
    container:
      image: docker:dind
      # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    outputs:
      sha: ${{ steps.docker-build.outputs.sha-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Build docker image
        id: docker-build
        uses: ./.github/workflows/docker-build
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image-name: check
          context: docker
          dockerfile: docker/Dockerfile
  conventional_commit:
    name: conventional commit check
    # The cocogitto-action fails on the self hosted runner:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          # Fetch all commits to generate the changelog
          fetch-depth: 0
      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@main
        with:
          check: true
  conventional_commit_pr:
    name: PR conventional commit check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          # Fetch all commits to generate the changelog
          fetch-depth: 0
          # pick the pr HEAD instead of the merge commit
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@main
        with:
          check: true
  typos:
    name: typos
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/check:${{ needs.build_docker.outputs.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
      checks: write
    needs: [build_docker]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Check for typos
        uses: crate-ci/typos@v1.28.3
  clippy:
    name: ${{ matrix.toolchain }} / clippy
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/check:${{ needs.build_docker.outputs.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta]
    needs: [build_docker]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup MXL Plyr build environment
        uses: ./.github/workflows/mxl-setup
        with:
          rust-toolchain: ${{ matrix.toolchain }}
          rust-toolchain-components: clippy
          just-config: false
      - name: cargo clippy
        uses: auguwu/clippy-action@1.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  hack:
    name: hack
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/check:${{ needs.build_docker.outputs.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
      checks: write
    defaults:
      run:
        shell: bash {0}
    needs: [build_docker]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup MXL Plyr build environment
        uses: ./.github/workflows/mxl-setup
        with:
          rust-toolchain: stable
          just-config: false
      - name: cargo hack
        run: |
          source /etc/profile
          just hack
  build_amd64:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/check:${{ needs.build_docker.outputs.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    if: github.event_name == 'pull_request'
    env:
      RESULT_DIR: result
    defaults:
      run:
        # Change shell invocation
        shell: bash {0}
    needs: [build_docker]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          # Fetch all commits to generate the changelog
          fetch-depth: 0
      - name: Setup MXL Plyr build environment
        id: setup
        uses: ./.github/workflows/mxl-setup
        with:
          rust-toolchain: stable
      - name: Build
        run: |
          source /etc/profile
          # FIXME: use eval to temporarily fix: https://github.com/falti/dotenv-action/issues/49
          eval "$(./scripts/mxl-env.py --print-env)"
          (
            # set -o pipefail exits the script if a command piped with tee exits with an error
            set -o pipefail
            just ${{ steps.setup.outputs.just-options }} build
          )
